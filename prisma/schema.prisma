// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type             String
  provider         String
  providerAccountId String
  refresh_token    String?
  access_token     String?
  expires_at       Int?
  token_type       String?
  scope            String?
  id_token         String?
  session_state    String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String
  image         String?
  role          String    @default("USER")
  companyId     String?
  company       Company?  @relation(fields: [companyId], references: [id])
  accounts      Account[]
  sessions      Session[]
  invoices      Invoice[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Company {
  id        String    @id @default(cuid())
  name      String
  email     String?
  phone     String?
  address   String?
  taxId     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  users     User[]
  invoices  Invoice[]
  clients   Client[]
}

model Client {
  id        String    @id @default(cuid())
  name      String
  email     String?
  phone     String?
  address   String?
  taxId     String?
  company   Company   @relation(fields: [companyId], references: [id])
  companyId String
  invoices  Invoice[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([companyId])
}

model Invoice {
  id        String        @id @default(cuid())
  number    String
  date      DateTime      @default(now())
  dueDate   DateTime
  status    String        @default("DRAFT")
  subtotal  Float
  tax       Float
  total     Float
  notes     String?
  companyId String
  company   Company       @relation(fields: [companyId], references: [id])
  clientId  String
  client    Client       @relation(fields: [clientId], references: [id])
  createdBy User         @relation(fields: [userId], references: [id])
  userId    String
  items     InvoiceItem[]
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model InvoiceItem {
  id          String   @id @default(cuid())
  description String
  quantity    Int
  unitPrice   Float
  total       Float
  taxRate     Float   @default(20)
  invoiceId   String
  accountCode String
  invoice     Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model AccountingEntry {
  id            String    @id @default(cuid())
  date          DateTime
  description   String
  debitAccount  String    // PCM 2025 account code
  creditAccount String    // PCM 2025 account code
  amount        Float
  reference     String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

enum UserRole {
  ADMIN
  USER
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  OVERDUE
  CANCELLED
}

enum DocumentType {
  INVOICE
  RECEIPT
  REPORT
  OTHER
} 